[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About StartR",
    "section": "",
    "text": "StartR is a website with materials to help you learn R and start using it to explore data. No prior experience in programming, statistics, or data is required to work through these materials. These materials were developed to prepare our students for our courses that expect some familiarity of R and data analysis."
  },
  {
    "objectID": "about.html#about-us",
    "href": "about.html#about-us",
    "title": "About StartR",
    "section": "About us",
    "text": "About us\n\n\n\n\n\nThis course is brought to you by the team at Monash University, Department of Econometrics and Business Statistics. You can find the full list of contributors in the link ‘Contributors’ at the footer of this site."
  },
  {
    "objectID": "modules/starter/r-basics/index.html",
    "href": "modules/starter/r-basics/index.html",
    "title": "3. R basics",
    "section": "",
    "text": "Artwork by @allison_horst.\nTo use R you’ll need to learn how to write some basic code. Fortunately R is a comparatively simple programming language to learn, it has:\n\na simple and tolerant syntax (this is like the ‘grammar’ of programming languages),\nextensive help resources written for people without programming skills,\nthousands of extension packages that make your analysis easier,\na friendly and supportive community of R users!\n\nYou can code! If you’ve used a calculator you’ve already written code, code is simply instructions made for a computer (like an equation for a calculator).\n\nArtwork by @allison_horst.\n\n\nJust like a calculator, R can be used to perform basic arithmetic (and a whole lot more!). Try out the following examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR is a functional programming language, which means that it primarily uses functions to complete tasks. A function allows you to do much more than basic arithmetic, they can do almost anything!\nExample:\nTo take the natural logarithm of 1, you would write:\n\n\n\n\n\n\n\n\nIn this example:\n\nlog is the name of the logarithm function\n(1) is the input to the function\n\nYou can look at the help file for any R function using ? or help(), try looking at the documentation for log:\n\n\n\n\n\n\n\n\nIn this documentation (under Usage) you’ll see that the log() function can accept 2 inputs: log(x, base = exp(1)).\nBy default the logarithm’s base is exp(1) or \\(e\\) (giving the natural logarithm), but you can change this by specifying a different base. Try changing the logarithm’s base to 10:"
  },
  {
    "objectID": "modules/starter/r-basics/index.html#using-r",
    "href": "modules/starter/r-basics/index.html#using-r",
    "title": "3. R basics",
    "section": "",
    "text": "Artwork by @allison_horst.\nTo use R you’ll need to learn how to write some basic code. Fortunately R is a comparatively simple programming language to learn, it has:\n\na simple and tolerant syntax (this is like the ‘grammar’ of programming languages),\nextensive help resources written for people without programming skills,\nthousands of extension packages that make your analysis easier,\na friendly and supportive community of R users!\n\nYou can code! If you’ve used a calculator you’ve already written code, code is simply instructions made for a computer (like an equation for a calculator).\n\nArtwork by @allison_horst.\n\n\nJust like a calculator, R can be used to perform basic arithmetic (and a whole lot more!). Try out the following examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR is a functional programming language, which means that it primarily uses functions to complete tasks. A function allows you to do much more than basic arithmetic, they can do almost anything!\nExample:\nTo take the natural logarithm of 1, you would write:\n\n\n\n\n\n\n\n\nIn this example:\n\nlog is the name of the logarithm function\n(1) is the input to the function\n\nYou can look at the help file for any R function using ? or help(), try looking at the documentation for log:\n\n\n\n\n\n\n\n\nIn this documentation (under Usage) you’ll see that the log() function can accept 2 inputs: log(x, base = exp(1)).\nBy default the logarithm’s base is exp(1) or \\(e\\) (giving the natural logarithm), but you can change this by specifying a different base. Try changing the logarithm’s base to 10:"
  },
  {
    "objectID": "modules/starter/r-basics/index.html#syntax",
    "href": "modules/starter/r-basics/index.html#syntax",
    "title": "3. R basics",
    "section": "Syntax",
    "text": "Syntax\nSyntax is the grammatical rules of a programming language, and while R has a flexible syntax it does have rules.\nJust like on a calculator, it doesn’t make sense to ask what 3 */ 5 is. So what does R do? Try it!\n\n\n\n\n\n\n\n\nR returns a ‘syntax error’ because it didn’t expect a division (/) to occur immediately after multiplication (*). While errors can be intimidating, they’re really trying to help. A syntax error in R starts with “unexpected” and then describes the part of your code which violates the syntax rules.\n\nSyntax errors are commonly from mismatched quotes ('...', \"...\") or brackets ((...), {...}), and can be tricky to fix. We’ll learn more about fixing errors in the next lesson about troubleshooting. \n\nCode comments\nOne way to make your code easier to understand is to add code comments. Any code after # will be completely ignored by R, allowing you to write helpful notes about what your code is doing. This is especially useful when sharing your code with others (or your future self)!\nAdd a code comment that explains what this code is doing:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe pipe, |&gt;\nA lot of functions in R (especially tidyverse functions) are designed to be chained together using |&gt; (the pipe). The pipe simply takes the result of the code on the left, and inserts it into the function on the right.\nExample:\n\n\n\n\n\n\n\n\nWriting long chains of code with the pipe makes your code easier to read and can be documented with comments. The equivalent code without the pipe is mean(exp(rnorm(1000))), since rnorm(1000) is ‘piped’ into the exp() function giving exp(rnorm(1000)) which is then piped into the mean() function.\n\n\n\n\n\n\nThe magrittr pipe, %&gt;%\n\n\n\nYou might encounter a similar looking magrittr pipe (%&gt;%) in examples online. It is included in the magrittr package, and behaves very similarly to the native pipe.\nThe native pipe (|&gt;) was added to R in version 4.1.0 directly into R’s syntax, and is recommended for use with new code."
  },
  {
    "objectID": "modules/starter/r-basics/index.html#objects",
    "href": "modules/starter/r-basics/index.html#objects",
    "title": "3. R basics",
    "section": "Objects",
    "text": "Objects\nObjects are used to store data in R, which can be recalled later for use in other code.\nYou can create an object with the assignment operator &lt;-. You can also use =, but we recommend sticking to &lt;- since = is also used for named function inputs.\n\n\n\n\n\n\n\n\nIf successful, it will look like nothing has happened because objects are created silently (no output messages). In RStudio, you will be able to see e added to your environment pane (top-right) with the value 2.7182818.\nThis object can be reused in other code, for example try computing the logarithm of e:\n\n\n\n\n\n\n\n\n\n\n\n\nObject naming\nA clear and descriptive object name is an important for your code to be readable, maintainable, and less error-prone.\nThere are two main styles commonly used in R:\n\n\n\n\n\n\nsnake_case (recommended)\n\n\n\nWords are separated by underscores (_).\nExample:\ntotal_sales &lt;- 1500\naverage_temperature &lt;- 23.5\n\n\n\n\n\n\n\n\ncamelCase\n\n\n\nThe first word is lowercase, and subsequent words start with a capital letter.\nExample:\ntotalSales &lt;- 1500\naverageTemperature &lt;- 23.5\n\n\n\n\n\nArtwork by @allison_horst.\nYou can use any object name you like (R doesn’t care), but we recommend that you:\n\nBe concise and descriptive\nNo-one likes to write out a really_long_object_name, however a clearly described variable is far better than x and y.\nSpell out all relevant details, for example temperature_celsius is better than temperature or temp (which can be confused for temporary).\nBe consistent\nChoose a naming convention (we recommend snake_case) and stick to it.\nAvoid existing names\nTry not to use names that are already used in R, especially not reserved words like TRUE and FALSE.\nCommon conflicting names include dt and df, which are the densities of t and F distributions (not abbreviations of data or data.frame).\nUse underscores only, no other special characters\nA lot of special characters (e.g. $, @, !, ., #) have special meanings in R, and should not be used.\nFun fact: Until R v2.0.0 (October 2004), underscore was the assignment operator!\n\n\n\nData types\nEach object in R has a type, here are some commonly used data types:\n\nNumeric: 42, 3.14\nWith sub-types:\n\nInteger: 42L (without decimals, the L indicates integer)\nDouble: 3.14 (with decimals)\n\nCharacter: \"startr\"\nLogical: TRUE and FALSE\nDate and Time: Sys.Date() and Sys.time()\n\nR also supports some special data types commonly used in statistics and data analysis:\n\nMissing values: NA\nEach data type can contain NA (not available) to indicate unknown values.\nComplex: 1 + 2i\nComplex numbers consist of real and imaginary parts.\n\nYou can check the data type of a variable with the class() function, and check if an object is a particular type with is.*() (for example is.numeric() and is.logical()).\n\n\nMixing data types\nR automatically converts between data types for you as needed, generally this is helpful and works well but it can sometimes be surprising.\nExperiment with combining different types of data mathematically, and try to reason why you get each result.\n\n\n\n\n\n\n\n\nMany of these mixed data type operations convert one type into another, in the above example:\n\n1L + 3.5: the integer (1L) became a double (1.0)\nTRUE + 3: the logical (TRUE) became numeric/double (1.0)\n\nYou can explicitly convert an object into a different type using as.*() functions (for example as.numeric() and as.character())."
  },
  {
    "objectID": "modules/starter/r-basics/index.html#vectors-matrices-and-arrays",
    "href": "modules/starter/r-basics/index.html#vectors-matrices-and-arrays",
    "title": "3. R basics",
    "section": "Vectors, matrices and arrays",
    "text": "Vectors, matrices and arrays\nThese objects contain multiple values of the same data type, organised into 1D vectors, 2D matrices or higher dimensional arrays.\n\nVectors\nA vector can contain multiple (0 or more) values of the same data type. Vectors are used extensively in R since datasets typically contain more than one observation! A singular value (usually a ‘scalar’ in other languages) is handled as a length 1 vector, so all of the previous examples have used R vectors.\nThe c() function (the combine function) is used to combine multiple vectors together.\n\n\n\n\n\n\n\n\nYou can also generate sequences with seq(), or simply with from:to for integer sequences.\n\n\n\n\n\n\n\n\nSome other useful vector functions include:\nMathematical Summaries:\n\nsum(): Calculate the total of all elements.\n\nmean(): Compute the average value.\nany(): Check if any element is TRUE.\n\nall(): Check if all elements are TRUE.\n\nmin(): Find the minimum value.\n\nmax(): Find the maximum value.\n\nmedian(): Compute the middle value.\n\nquantile(): Compute specified quantiles.\n\nsd(): Calculate the standard deviation.\n\nvar(): Compute the variance.\n\nprod(): Calculate the product of all elements.\n\nCumulative maths:\n\ncumsum(): Compute the cumulative sum of elements.\n\ncumprod(): Compute the cumulative product of elements.\n\ndiff(): Calculate the differences between consecutive elements.\n\nVector Manipulation :\n\nrep(): Replicate elements in the vector.\nsort(): Sort elements in ascending or descending order.\n\nrev(): Reverse the order of elements.\n\nlength(): Get the number of elements in the vector.\ntable(): Create a frequency table of elements.\n\nSet Operations:\n\nunion(): Combine elements from two vectors, removing duplicates.\n\nintersect(): Find common elements between two vectors.\n\nsetdiff(): Find elements in one vector that are not in another.\n\nsetequal(): Check if two vectors contain the same elements (ignoring order).\n\nduplicated(): Identify duplicate elements in a vector.\n\nunique(): Extract unique elements from a vector.\n\n\nTry some of these functions out on these vectors:\n\n\n\n\n\n\n\n\nWhat happens when you try math operations such as + and * between random_integers and random_numbers?\n\n\nMatrices\nA matrix is a 2-dimensional data structure where all elements must be of the same type (e.g., numeric, character). A matrix is constructed with the matrix() function:\n\nmatrix(data, nrow, ncol, byrow = FALSE)\n\ndata: A vector to fill the matrix.\n\nnrow: Number of rows.\nncol: Number of columns.\nbyrow: Whether data fills the matrix row-wise (TRUE) or column-wise (FALSE).\n\n\nTry to create a matrix with 26 rows and 2 columns, containing all lower case letters in the first column and upper case LETTERS in the second column.\n\n\n\n\n\n\n\n\n\n\n\nSome useful functions for working with matrices includes:\n\ndim(): Get the dimensions (rows and columns) of the matrix.\n\nnrow(), ncol(): Get the number of rows or columns, respectively.\n\ncbind(), rbind(): Combine vectors/matrices together by columns or rows.\nrowSums(), colSums(): Compute the sum of each row or column.\n\nrowMeans(), colMeans(): Compute the mean of each row or column.\n\nt(): Transpose the matrix (swap rows and columns).\n\ndiag(): Extract or set the diagonal of a matrix.\n\nx %*% y: Perform matrix multiplication of x and y.\n\n\n\nArrays\nArrays are similar to matrices, but extend to higher dimensional structures. They are created with the array() function:\n\narray(data, dim)\n\ndata: A vector to fill the matrix.\n\ndim: A vector of dimension sizes.\n\n\n\n\nIndexing and Slicing\nThe index of a vector (or matrix/array) is the position of each element. Indexing refers to the extraction of a specific value from a vector using its index (position). Relatedly, slicing extracts 0 or more values from the vector.\nMathematically, this is equivalent to \\(x_i\\) where \\(x\\) is your vector and \\(i\\) are the index position(s) to extract. Indexing and slicing starts from 1 in R (other languages start from 0), so the first value is at index 1 and the last value is at index length(x).\nTo index/slice a vector, we use single square brackets: x[i], where x is your vector and i is a vector of positions to extract.\nTry to find the 13th letter of the alphabet by indexing the letters object:\n\n\n\n\n\n\n\n\n\n\n\nNow try to slice the first 10 letters by constructing a numeric sequence with seq():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe sequence of integers from 1 to 10 can be created with this code\nseq(1, 10)\n\n\n\n\n\n\n\n\n\n\nOther indices\n\n\n\n\n\nYou can also use logical values as your index, which will keep values if the index is TRUE.\nNegative indices can also be used, which will remove those positions from the vector.\n\n\n\nYou can also index/slice matrices and arrays, you simply need to specify more dimensions inside the square brackets. For a matrix it is x[rows, cols], and for an array you would use x[i, j, k, ...] for each dimension.\nThe volcano matrix details the topography of Auckland’s Maunga Whau volcano, extract the first 10 rows and columns 43 to 51.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlicing only one dimension\n\n\n\n\n\nWhen slicing only one dimension (e.g. only rows keeping all columns), you can omit the unused dimension from the square brackets. For example, volcano[1:10,] will keep the first 10 rows and all columns of the volcano matrix. Similarly, volcano[,43:51] will keep all rows and slice columns 43 to 51 from the matrix.\nIf you slice only one column or row (e.g. volcano[1,] for the first row only), R will simplify the result into a vector. This can be problematic if you’re doing matrix multiplication, so it can be useful to use volcano[1,,drop = FALSE] to prevent dropping the matrix class."
  },
  {
    "objectID": "modules/starter/r-basics/index.html#data-frames-and-lists",
    "href": "modules/starter/r-basics/index.html#data-frames-and-lists",
    "title": "3. R basics",
    "section": "Data frames and lists",
    "text": "Data frames and lists\n\nLists\nA list is a type of object that can contain different types of data. Lists are constructed with list(...), and the list contents can be named. For example:\n\n\n\n\n\n\n\n\nYou can see that lists can contain anything, and of any length. The date in the example above has a different length and data type from the letters.\n\n\nData frames\nA data.frame is very similar to a list, but it requires all vectors (of possibly different types) to have the same length (the number of rows in the data). Data frames can be constructed with the data.frame() function, where each column or the dataset is a vector used in this function.\n\n\n\n\n\n\n\n\nYou can see that the data.frame has 26 rows and that today’s date has been replicated to fit the dataset.\nA data frame is one of the most commonly used data structures in R for storing data. It is similar to a matrix, but it allows you to store different types of data (numeric, character, logical, etc.) in different columns.\nData frames are usually created by importing data files, the most common data format is CSV (comma separated values) which can be read in with read.csv(). More information about reading data can be found in the data reading lesson. \nMany packages also come with datasets for demonstrating examples, we’ll be using the penguins data.frame from the palmerpenguins package:\n\n\n\n\n\n\n\n\n\n\nIndexing, slicing, and extracting\nLists and data frames can also be indexed and sliced using single square brackets (x[i]). Lists are 1D (like vectors), and data frames are 2D (like matrices).\nIt is also possible to extract a column/vector out of lists and data frames. This is accomplished using double square brackets (x[[3]], or x[[\"column\"]]) or the dollar sign for named columns (x$column)."
  },
  {
    "objectID": "modules/starter/installation/index.html#installing-r",
    "href": "modules/starter/installation/index.html#installing-r",
    "title": "1. Installing R and RStudio",
    "section": "Installing R",
    "text": "Installing R\nThe R programming language is available through the Comprehensive R Archive Network (CRAN) website.\n\n\n\n\n\n\n\nDetailed instructions\n\n\n\nSelect your operating system above for more detailed instructions.\n\n\n\n\nWindows\nDownload the R installer:\n\nOpen your web browser and go to the R Project website.\nUnder the “Download and Install R” section, click on the “Download R for Windows” link.\n\n\n\nOn the next page, click on “base” to download the base distribution of R.\n\n\n\nClick on the “Download R x.x.x for Windows” link (the version number will vary).\n\n\n\nSave the .exe file to your computer (the download should begin automatically).\n\nInstall R:\n\nOnce the .exe file has been downloaded, open the executable file.\n\n\n\nAllow the installer to change your device.\n\n\n\nThe R Setup Wizard will appear. Click Next.\nAccept the license agreement by selecting I Agree.\nChoose the installation path. The default is usually fine (e.g., C:\\Program Files\\R\\R-x.x.x), but you can choose a different directory if you prefer. Click Next.\nSelect components for installation. The default components (which include everything you need) should be fine, so click Next.\nChoose the start menu folder for the R shortcut, or leave it as the default and click Next.\nSelect whether you want to associate R with .R, .Rdata, and .rds files. You can accept the default option and click Next.\nChoose whether to create a desktop shortcut for R. If you want it, leave the box checked and click Next.\nClick Install to begin the installation.\nOnce the installation is complete, click Finish to exit the setup wizard.\n\n\n\n\n\n\n\nInstalling Rtools (optional)\n\n\n\n\n\nRtools is a collection of software tools necessary for building R packages on Windows. If you are creating R packages, or installing R packages from sources it is useful to have Rtools installed.\nRtools includes compilers and other utilities which help install packages from sources which contain C, C++, or Fortran code.\nDownload Rtools:\n\nOpen your browser and go to the Rtools page: Rtools for Windows.\nFind the version of Rtools that matches your version of R (e.g., Rtools43 is compatible with R 4.3.x).\nClick on the download link for the appropriate Rtools version (e.g., Rtools43.exe for R 4.3.x).\n\nInstall Rtools:\n\nAfter downloading the installer, double-click on the .exe file to start the installation process.\nIn the Setup Wizard, select Next.\nAccept the license agreement and click Next.\nChoose the installation path (the default should be fine), then click Next.\nSelect the components to install. The default components should suffice for most users, so click Next.\nChoose whether to add Rtools to your system’s PATH variable. It is highly recommended to leave this option checked, as it will make Rtools available from the command line. Click Next.\nClick Install to begin the installation process.\nOnce installation is complete, click Finish.\n\n\n\n\n\n\nMacOS\nDownload the R installer:\n\nOpen your web browser and go to the R Project website.\nUnder the “Download and Install R” section, click Download R for macOS.\n\n\n\nOn the next page, click the “R-4.x.x.pkg” link (where “x.x” will be the version number) to download the R installer for macOS. This will download a .pkg file.\n\n\nInstall R:\n\nAfter downloading the .pkg file, open it to start the installation process.\n\n\n\nFollow the on-screen instructions in the installation wizard:\n\nClick Continue.\nRead and agree to the software license.\nClick Install to start the installation.\nIf prompted, enter your macOS administrator password to authorize the installation.\n\n\n\n\nOnce the installation is complete, click Close to exit the installer.\n\n\n\n\n\n\n\nInstalling Xcode (optional)\n\n\n\n\n\nOn macOS, you may need to install Xcode Command Line Tools to compile R packages that require compiled code (such as C, C++, or Fortran). If you are creating R packages, or installing R packages from sources it is useful to have Xcode installed.\nRtools includes compilers and other utilities which help install packages from sources which contain C, C++, or Fortran code.\nInstall Xcode Command Line Tools:\n\nOpen the Terminal application (you can find it via Spotlight search).\nRun the following command to install Xcode Command Line Tools:\nxcode-select --install\nA pop-up will appear prompting you to install the tools. Click Install to proceed.\n\n\n\n\n\n\nLinux\nBelow are instructions for installing R on Ubuntu / Debian systems. For other linux distributions, please refer to these R installation instructions: https://docs.posit.co/resources/install-r.html\n\nOpen a new Terminal window.\nRun the following command to ensure your package list is up-to-date:\nsudo apt update\nInstall the necessary software properties package:\nsudo apt install -y software-properties-common\nAdd the CRAN repository to your list of package sources:\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -c | awk '{print $2}')/\"\nImport the CRAN GPG key for package verification:\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\nUpdate your package list again:\nsudo apt update\nInstall R:\nsudo apt install -y r-base\n\n\n\n\n\n\n\nInstalling r-base-dev (optional)\n\n\n\n\n\nThe r-base-dev package contains development tools and libraries needed to compile R packages from source. It is particularly important when you want to install R packages that require compiling native code (such as C, C++, or Fortran).\nTo install r-base-dev (after installing r-base):\n\nOpen a Terminal window.\nRun the following command to install r-base-dev:\nsudo apt install -y r-base-dev"
  },
  {
    "objectID": "modules/starter/installation/index.html#installing-rstudio",
    "href": "modules/starter/installation/index.html#installing-rstudio",
    "title": "1. Installing R and RStudio",
    "section": "Installing RStudio",
    "text": "Installing RStudio\nThe RStudio can be downloaded from the Posit website. Scroll down to All Installers and Tarballs and download the RStudio version for your operating system.\n\n\n\n\n\n\n\nDetailed instructions\n\n\n\nSelect your operating system above for more detailed instructions.\n\n\n\n\nWindows\nDownload the RStudio Installer:\n\nOpen your web browser and go to the RStudio website.\nUnder the “RStudio Desktop” section, click on the Download RStudio button.\nYou will be directed to a page where you can select the version of RStudio for your operating system. Select RStudio for Windows.\nClick on the Download RStudio Desktop button to download the installer for Windows. It will download a .exe file.\n\n\nInstall RStudio:\n\nAfter downloading the .exe file, open the executable file.\n\n\n\nAllow the installer to make changes on your computer.\n\n\n\nThe RStudio Setup Wizard will open. Click Next to continue.\nAccept the license agreement by selecting I Agree.\nChoose the installation directory. The default installation path (e.g., C:\\Program Files\\RStudio) should be fine, but you can change it if needed. Click Next.\nSelect whether you want to create a desktop shortcut for RStudio. If you want one, leave the box checked and click Next.\nClick Install to begin the installation.\nOnce installation is complete, click Finish to exit the setup wizard.\n\nLaunch RStudio:\nAfter the installation, you can launch RStudio either by using the desktop shortcut (if you created one) or by searching for “RStudio” in the Windows Start menu.\n\n\nMacOS\nDownload the RStudio installer:\n\nOpen your web browser and go to the RStudio website.\nScroll down to the “RStudio Desktop” section and click Download RStudio.\nOn the next page, under RStudio Desktop for macOS, click Download RStudio Desktop (this will download the .dmg file).\n\n\nInstall RStudio:\n\nAfter the .dmg file has downloaded, locate the file and double-click it to open the disk image.\nA new window will appear showing the RStudio application icon. Drag the RStudio icon into your Applications folder.\n\n\n\nOnce the application is copied to the Applications folder, you can close the disk image window.\n\nLaunch RStudio:\nAfter the installation, you can launch RStudio either by double-clicking the RStudio app in the Applications folder or by searching for “RStudio” in the application launcher.\n\n\nLinux\nDownload the RStudio installer:\n\nOpen your web browser and go to the RStudio Download page.\nScroll down to the “RStudio Desktop” section and click Download RStudio.\nOn the next page, choose the .deb package for Ubuntu/Debian and download it to your system.\n\nInstall RStudio:\n\nOnce the .deb file has been downloaded, open it with your application manager.\nClick the manager’s install button, and enter your system password if necessary.\n\nLaunch RStudio:\nAfter the installation, you can launch RStudio either from your application menu or by running rstudio from your Terminal."
  },
  {
    "objectID": "modules/starter/rstudio-basics/index.html",
    "href": "modules/starter/rstudio-basics/index.html",
    "title": "2. RStudio basics",
    "section": "",
    "text": "RStudio is an Integrated Development Environment (IDE) developed by Posit for the R programming language. It is designed for analysing data, and is the most popular coding environment for R. In extension to the usual script editing and console output of other IDEs, RStudio also includes tools for viewing analysis results such as data, plots, and documents.\nStart by opening RStudio on your computer, once loaded it should look like this:\n\nIn the R Console on the left, you should see information about your R installation. If you see something similar, congratulations – you’ve successfully installed both R and RStudio as outlined in the previous lesson!\nYou can try out some R code by typing into the R Console, just after the &gt; at the bottom. We’ll get some practice writing R code in the next lesson, but for now you can try:\n\n1 + 1 (Make sure that basic math still applies)\nhist(rnorm(100)) (Histogram of 100 random normally distributed numbers)\n\n\nAny code you write into the R Console is temporary, and will be lost when you restart R or close RStudio. Any code you want to keep should be written into an R script (or an R document, explained in a later lesson).\nTo create an R script, click on the new document drop-down and select “R Script” (or use the keyboard shortcut CtrlCtrl):\n\nAn R script is a simple text file which you can write and save your R code in. To run code from an R script, click on the line of code you want to run and then click the Run button (or use the keyboard shortcut CtrlCtrl)\n\nThe code from your R script is ran in the Console, and the result is displayed.\n\n\n\n\n\n\nRunning selected code\n\n\n\n\n\nInstead of running the entire line of code, you can also run specific parts of your code by first highlighting the part you wish to run.\nTry highlighting rnorm(100) before clicking the run button (or using the keyboard shortcut CtrlCtrl)"
  },
  {
    "objectID": "modules/starter/rstudio-basics/index.html#using-rstudio",
    "href": "modules/starter/rstudio-basics/index.html#using-rstudio",
    "title": "2. RStudio basics",
    "section": "",
    "text": "RStudio is an Integrated Development Environment (IDE) developed by Posit for the R programming language. It is designed for analysing data, and is the most popular coding environment for R. In extension to the usual script editing and console output of other IDEs, RStudio also includes tools for viewing analysis results such as data, plots, and documents.\nStart by opening RStudio on your computer, once loaded it should look like this:\n\nIn the R Console on the left, you should see information about your R installation. If you see something similar, congratulations – you’ve successfully installed both R and RStudio as outlined in the previous lesson!\nYou can try out some R code by typing into the R Console, just after the &gt; at the bottom. We’ll get some practice writing R code in the next lesson, but for now you can try:\n\n1 + 1 (Make sure that basic math still applies)\nhist(rnorm(100)) (Histogram of 100 random normally distributed numbers)\n\n\nAny code you write into the R Console is temporary, and will be lost when you restart R or close RStudio. Any code you want to keep should be written into an R script (or an R document, explained in a later lesson).\nTo create an R script, click on the new document drop-down and select “R Script” (or use the keyboard shortcut CtrlCtrl):\n\nAn R script is a simple text file which you can write and save your R code in. To run code from an R script, click on the line of code you want to run and then click the Run button (or use the keyboard shortcut CtrlCtrl)\n\nThe code from your R script is ran in the Console, and the result is displayed.\n\n\n\n\n\n\nRunning selected code\n\n\n\n\n\nInstead of running the entire line of code, you can also run specific parts of your code by first highlighting the part you wish to run.\nTry highlighting rnorm(100) before clicking the run button (or using the keyboard shortcut CtrlCtrl)"
  },
  {
    "objectID": "modules/starter/rstudio-basics/index.html#the-4-pane-workspace",
    "href": "modules/starter/rstudio-basics/index.html#the-4-pane-workspace",
    "title": "2. RStudio basics",
    "section": "The 4-pane workspace",
    "text": "The 4-pane workspace\n\nThe RStudio workspace is organised into 4 adjustable panes which serve different purposes:\n\nSource Pane (Top-Left) Write your R code in scripts, documents, and web apps here. Each open file is split across tabs.\nConsole Pane (Bottom-Left) The Console is where code is ran, and most results are shown. This pane also has tabs for the Terminal (a code interface to your computer), and background jobs (used for running code in the background).\nEnvironment and Tools Pane (Top-Right) The environment is where your R objects exist. Try running x &lt;- 1:10 which will create an object named x containing the numbers 1 to 10. This newly created object should appear in the environment tab.\nThis pane also includes other tabs containing tools specific to your R project (such as document rendering and version control with git). R projects are explained more in a later lesson. \nFiles, Packages, Help and Outputs Pane (Bottom-Right) This is where most of your visual outputs are shown.\nThis pane contains tabs for many output types:\n\nPlots: View generated plots.\nViewer: View interactive outputs and documents.\nPresentation: View presentation slides.\n\nIt also includes useful tools for writing R code, including:\n\nFiles: Explore your files.\nHelp: View and search documentation for R functions.\nPackages: Manage installed packages.\n\n\n\n\n\n\n\n\nCustomising your workspace\n\n\n\n\n\nThe appearance and layout of your workspace is fully customisable. You can resize each pane by dragging the gaps between panes.\nFurther customisation options can be found in the Tools &gt; Global Options, from there you can switch the RStudio colour theme under Appearance and reorganise the pane tabs under Pane Layout."
  },
  {
    "objectID": "modules/starter/rstudio-basics/index.html#r-packages",
    "href": "modules/starter/rstudio-basics/index.html#r-packages",
    "title": "2. RStudio basics",
    "section": "R packages",
    "text": "R packages\nR packages extend the functionality of R with new functions and datasets. R packages can be managed from the “Packages” tab of the Output pane. Here you can see the currently installed packages, update them, or install new packages.\n\nTo install a new R package, click on the “Install” button to open the “Install Packages” pop-up. Then type the name of the package you want to install (e.g. “tidyverse”) and click “Install” (the dependencies checkbox should also be ticked):\n\nYou can use either the “Packages” tab or directly use the install.packages() function to install packages.\n\nTry installing the palmerpenguins package. It provides a dataset about Antarctic penguins that we’ll be using in many examples. Once you complete the installation pop-up, you should see the Console busily working to download and install the package. Above all of the red text, you will find that R is running install.packages(\"palmerpenguins\") to install the package.\nTo use an installed package, you need to attach it with the library() function. Try loading the palmerpenguins package with library(palmerpenguins). If successful, you will now be able to view the penguins dataset by running the code penguins and view the dataset’s documentation by running ?penguins.\n\n\n\n\n\n\nUsing packages\n\n\n\n\n\nR packages only need to be installed once, but they need to be attached every time before you use them.\nLoad all of the packages you use at the start of each R script with library().\nExclude (or comment out) install.packages() from your scripts to prevent re-installing packages each time you run your code.\n\n\n\nTry installing and attaching the palmerpenguins package using only code here:"
  },
  {
    "objectID": "modules/analysis/data-wrangling/index.html",
    "href": "modules/analysis/data-wrangling/index.html",
    "title": "Data wrangling with R",
    "section": "",
    "text": "The tidyverse is a collection of R packages that transform and visualize data. They aim to be cohesive with each other and provide simple building block functions for you to use in complex applications. All packages of the tidyverse share very similar syntax and ideologies.\nThe tidyverse includes the following packages:\n\ndplyr: grammar of data manipulation\ntidyr: reshape your data\nreadr: read rectangular data\ntibble: re-imagining of the data frame\nstringr: working with string data\nggplot2: grammar of graphics\n\nand many more…\nIn this chapter, we focus on two packages: dplyr and tidyr.\ndplyr makes manipulating data easy. tidyr helps you to create “tidy data” (data where each variable is in a column, each observation is a row and each value is a cell). These packages contain the functions that help with adding, renaming, removing columns, computing new variables, joining data sets together, and summarising your data. These can solve the most common data manipulation challenges.\n\n\n\n\n\n\nTo get start on the journey\n\n\n\nFirst, install the core tidyverse packages with: install.packages(\"tidyverse\")\nThen, load the tidyverse package with: library(tidyverse)\n\n\n\n\n\n\n\n\nTip\n\n\n\nDid you know you can also load specific library separately, for example, library(dplyr)"
  },
  {
    "objectID": "modules/analysis/data-wrangling/index.html#introduction-to-tidyverse-1",
    "href": "modules/analysis/data-wrangling/index.html#introduction-to-tidyverse-1",
    "title": "Data wrangling with R",
    "section": "",
    "text": "The tidyverse is a collection of R packages that transform and visualize data. They aim to be cohesive with each other and provide simple building block functions for you to use in complex applications. All packages of the tidyverse share very similar syntax and ideologies.\nThe tidyverse includes the following packages:\n\ndplyr: grammar of data manipulation\ntidyr: reshape your data\nreadr: read rectangular data\ntibble: re-imagining of the data frame\nstringr: working with string data\nggplot2: grammar of graphics\n\nand many more…\nIn this chapter, we focus on two packages: dplyr and tidyr.\ndplyr makes manipulating data easy. tidyr helps you to create “tidy data” (data where each variable is in a column, each observation is a row and each value is a cell). These packages contain the functions that help with adding, renaming, removing columns, computing new variables, joining data sets together, and summarising your data. These can solve the most common data manipulation challenges.\n\n\n\n\n\n\nTo get start on the journey\n\n\n\nFirst, install the core tidyverse packages with: install.packages(\"tidyverse\")\nThen, load the tidyverse package with: library(tidyverse)\n\n\n\n\n\n\n\n\nTip\n\n\n\nDid you know you can also load specific library separately, for example, library(dplyr)"
  },
  {
    "objectID": "modules/analysis/data-wrangling/index.html#introduction-to-dplyr-1",
    "href": "modules/analysis/data-wrangling/index.html#introduction-to-dplyr-1",
    "title": "Data wrangling with R",
    "section": "Introduction to dplyr",
    "text": "Introduction to dplyr\ndplyr provides a selection of tools for the most common data wrangling tasks. There are a few simple yet handy functions.\n\nselect()\nfilter()\narrange()\nmutate()\ngroup_by() along with ungroup()\ncount()\ncase_when()"
  },
  {
    "objectID": "modules/analysis/data-wrangling/index.html#select",
    "href": "modules/analysis/data-wrangling/index.html#select",
    "title": "Data wrangling with R",
    "section": "select()",
    "text": "select()\nThis function allows you to pick particular variables from your data.\n\ndata |&gt;\n    select(variable)\n\nThis is not only limited to one variable selection. You can select multiple variables by separating the column name with the comma.\n\ndata |&gt;\n    select(variable1, variable2)\n\n\n\n\n\n\n\nYour turn!\n\n\n\nWe will be using penguin data from the palmerpenguins package.\nLet’s say that you want to look at whether the body mass changes over the year.\nHint: To look at the column names of the data, you can use the functions colnames()\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\nSelection helpers\nThere are many helper functions that allow you to select variables by matching the patterns in the column’s name. Let’s look at a few examples.\n\nstarts_with(): select all variables that start with a prefix.\n\n\npenguins |&gt;\n    select(starts_with(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n\n\n\nends_with(): select all variables that ends with a suffix.\n\n\npenguins |&gt;\n    select(ends_with(\"mm\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows\n\n\n\ncontains(): select all variables that contains a literal string.\n\n\npenguins |&gt;\n    select(contains(\"length\"))\n\n# A tibble: 344 × 2\n   bill_length_mm flipper_length_mm\n            &lt;dbl&gt;             &lt;int&gt;\n 1           39.1               181\n 2           39.5               186\n 3           40.3               195\n 4           NA                  NA\n 5           36.7               193\n 6           39.3               190\n 7           38.9               181\n 8           39.2               195\n 9           34.1               193\n10           42                 190\n# ℹ 334 more rows\n\n\n\nnum_range(): select all variables that matches a numerical range like x01, x02, x03.\n\n\nbillboard |&gt; \n    select(num_range(\"wk\", 10:15))\n\n# A tibble: 317 × 6\n    wk10  wk11  wk12  wk13  wk14  wk15\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1    NA    NA    NA    NA    NA    NA\n 2    NA    NA    NA    NA    NA    NA\n 3    51    51    51    47    44    38\n 4    61    61    59    61    66    72\n 5    57    64    70    75    76    78\n 6     6     7    22    29    36    47\n 7    NA    NA    NA    NA    NA    NA\n 8    36    37    37    38    49    61\n 9    10     9     8     6     1     2\n10    59    66    68    61    67    59\n# ℹ 307 more rows"
  },
  {
    "objectID": "modules/analysis/data-wrangling/index.html#filter",
    "href": "modules/analysis/data-wrangling/index.html#filter",
    "title": "Data wrangling with R",
    "section": "filter()",
    "text": "filter()\nThis allow you to extract observation from the data based on a given condition.\n\ndata |&gt;\n    filter(expression)\n\nFor the expression field, there are many functions and operators that are useful for constructing the expressions.\n\n==, &gt;, &gt;= etc\n&, |, !, xor()\nis.na()\nbetween(), near()\n\n\npenguins |&gt;\n    filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "contribute.html#join-the-group-of-contributors",
    "href": "contribute.html#join-the-group-of-contributors",
    "title": "Contribute to StartR",
    "section": "Join the group of contributors",
    "text": "Join the group of contributors"
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html",
    "href": "modules/writing/quarto-basics/index.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "Quarto is a free, open-source system that helps you create interactive and reproducible documents easily."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#sweave",
    "href": "modules/writing/quarto-basics/index.html#sweave",
    "title": "Quarto Basics",
    "section": "Sweave",
    "text": "Sweave\nSweave was one of the first tools for literate programming in R, allowing users to embed R code in LaTeX documents, combining R’s statistical power with LaTeX’s typesetting."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#r-markdown",
    "href": "modules/writing/quarto-basics/index.html#r-markdown",
    "title": "Quarto Basics",
    "section": "R Markdown",
    "text": "R Markdown\nR Markdown is a modern alternative to Sweave, enabling the integration of text and R code in various output formats like HTML, PDF, and Word, not just LaTeX."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#quarto",
    "href": "modules/writing/quarto-basics/index.html#quarto",
    "title": "Quarto Basics",
    "section": "Quarto",
    "text": "Quarto\nWhich leads us to Quarto, a new system that enhances the R Markdown ecosystem. Quarto provides a seamless framework for integrating code, text, and visualisations into a single, interactive, and reproducible document."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#setting-up-quarto",
    "href": "modules/writing/quarto-basics/index.html#setting-up-quarto",
    "title": "Quarto Basics",
    "section": "Setting Up Quarto",
    "text": "Setting Up Quarto\nTo get started with Quarto, you will need to install Quarto. You can do this by here.\nOnce you have installed Quarto, you can create a new Quarto document by:\n\nGo to the File menu in RStudio\nSelect New File &gt; New File &gt; Quarto Document\n\n\n\n\n\n\n\nChoose the document type: Document, Presentation, or Interactive.\n\n\n\n\n\n\nA Quarto file is a plain text file with the extension .qmd.\nNow that you’ve got your first quarto document up and ready, let’s explore some key components! These include:\n\nA YAML header\nChunks of R code\nMarkdown text"
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#yaml",
    "href": "modules/writing/quarto-basics/index.html#yaml",
    "title": "Quarto Basics",
    "section": "YAML",
    "text": "YAML\nWhen you open up your first quarto document, you will notice a block of text up the top that looks something like this:\n\n\n\n\n\nThis is the YAML header, which contains metadata about your document, including the title, author, and editor. It allows you to edit the document’s title (currently “Untitled”), specifies that the output will be in HTML format, and indicates that the document will open in the visual editor by default.\n\n\n\n\n\n\nSource vs Visual Editor\n\n\n\nRStudio v1.4 or higher includes Visual Markdown editing. Instead of markdown syntax (e.g., bolding with double asterisks), you can format text, add images and insert tables using a toolbar or keyboard commands, similar to a word processor. View sections 28.3 and 28.4 for more detail.\n\n\nBeyond the basics, you can add some real handy components to the YAML\n\n\n\nauthor\nFor assignments especially, its good to include your name and potentially student ID with this section in the YAML.\n\n\nsubtitle\nFor reports it may be nice to add a subtitle for further detail.\n\n\ntoc\nA table of contents can be a useful tool in structuring your document. toc-depth specifies the level of headings to include (e.g. toc-depth: 2 includes the top-level headings and second-level headings in the toc.)\n\n\ndate\nIf you’d like to include the due date or publishing date of the report.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYAML Structure\n\n\n\nThe structure of a YAML can be a little finicky, and errors may occur if it is not formatted correctly. If you encountering errors or missing components - it may be worthwhile to cross-check. A useful starting point is the Quarto documentation."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#r-code-chunks",
    "href": "modules/writing/quarto-basics/index.html#r-code-chunks",
    "title": "Quarto Basics",
    "section": "R Code Chunks",
    "text": "R Code Chunks\nCode chunks refer to sections in the document where you can write and execute code. These chunks are enclosed by three backticks followed by the name of the language you are using (e.g., r for R code). Code chunks can be included in three ways:\n\nKeyboard commands: Ctrl + Alt + I (Windows) or Cmd + Option + I (Mac)\nClicking the Insert button in the toolbar (top right):\n\n\n\n\n\n\n\nTyping the code chunk manually:\n\n\n\n\n\n\nWrite the code you want to include within the chunk and when you run it, the output will be displayed directly below the chunk!\n\n\n\n\n\n\nDid you know\n\n\n\nCode doesn’t have to be in a chunk! You can also include inline code by using backticks (``) around code you would like to run in text.\n\n\nYou can also add options to the code chunk to control how the code is executed and displayed. For example, you can specify the output format, the width and height of plots, and whether the code should be displayed in the output.\n\n\n\n\n\nLook at the image of the code chunk above, you can see that the chunk has the following options:\nfig-cap: This option allows you to add a caption to the figure.\nfig-width: This option specifies the width of the figure.\necho: This option controls whether the code in the chunk is displayed in the output.\nThese are only a couple examples of options for chunk options, and there are many more available. You can find a full list of chunk options in section 28.5.2 as well as further discussion in Communicating with Quarto.\n\n\n\n\n\n\nGlobal Options\n\n\n\nTo set global options for all code chunks, add them in the YAML header under execute:. Indent the options you want to apply by pressing tab on the next line."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#headings",
    "href": "modules/writing/quarto-basics/index.html#headings",
    "title": "Quarto Basics",
    "section": "Headings",
    "text": "Headings\nHeadings are created using the # symbol followed by the heading text. The number of # symbols indicates the level of the heading. For example, # creates a first-level heading, ## creates a second-level heading, and so on."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#text-formatting",
    "href": "modules/writing/quarto-basics/index.html#text-formatting",
    "title": "Quarto Basics",
    "section": "Text Formatting",
    "text": "Text Formatting\nJust like in any other word processors, you can also format your text. Here are some examples:\n\nBold: **bold** or __bold__\nItalic: *italic* or _italic_\nStrikethrough: ~~strikethrough~~\nCode: `code`"
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#lists",
    "href": "modules/writing/quarto-basics/index.html#lists",
    "title": "Quarto Basics",
    "section": "Lists",
    "text": "Lists\nLists can be created using *. You can also create nested lists by indenting the items with spaces.\n\n\n\n\n\n\nChecklist\n\n\n\nYou can also create checklists in Quarto! This can be done by using - [ ] for an empty box and - [x] for a checked box."
  },
  {
    "objectID": "modules/writing/quarto-basics/index.html#test-your-knowledge",
    "href": "modules/writing/quarto-basics/index.html#test-your-knowledge",
    "title": "Quarto Basics",
    "section": "Test your knowledge",
    "text": "Test your knowledge\n** potentially a multiple choice question here about different common chunk options and what they do ??**\n** interactive component to edit a basic yaml / include things in yaml – pain point: warnings, messages = false, toc **"
  },
  {
    "objectID": "modules/analysis/linear-regression/index.html",
    "href": "modules/analysis/linear-regression/index.html",
    "title": "Linear regression with R",
    "section": "",
    "text": "Linear regression is a statistical method used to model the relationship between a dependent variable and one or more independent variables. It aims to find the best-fitting linear relationship that describes how the dependent variable changes in response to the independent variable(s). This technique is of key importance in statistics and data science and is used extensively for predictive analysis.\nSimple linear regression refers to fitting a straight line to a set of data points to model the relationship between a single independent variable and a dependent variable. The equation of a simple linear regression model is given by: \\(y = \\beta_0 + \\beta_1x + \\epsilon\\), where \\(y\\) is the dependent variable, \\(x\\) is the independent variable, \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope, and \\(\\epsilon\\) is the error term that follows a normal distribution with zero mean and constant variance \\(\\sigma^2\\).\n\n\n\n\n\n\nYour turn!\n\n\n\nConsider the following plot with dist as the dependent variable and speed as the independent variable:\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWhat is the approximate best intercept and slope for the data?\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/analysis/linear-regression/index.html#introduction",
    "href": "modules/analysis/linear-regression/index.html#introduction",
    "title": "Linear regression with R",
    "section": "",
    "text": "Linear regression is a statistical method used to model the relationship between a dependent variable and one or more independent variables. It aims to find the best-fitting linear relationship that describes how the dependent variable changes in response to the independent variable(s). This technique is of key importance in statistics and data science and is used extensively for predictive analysis.\nSimple linear regression refers to fitting a straight line to a set of data points to model the relationship between a single independent variable and a dependent variable. The equation of a simple linear regression model is given by: \\(y = \\beta_0 + \\beta_1x + \\epsilon\\), where \\(y\\) is the dependent variable, \\(x\\) is the independent variable, \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope, and \\(\\epsilon\\) is the error term that follows a normal distribution with zero mean and constant variance \\(\\sigma^2\\).\n\n\n\n\n\n\nYour turn!\n\n\n\nConsider the following plot with dist as the dependent variable and speed as the independent variable:\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWhat is the approximate best intercept and slope for the data?\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/starter/project-structure/index.html",
    "href": "modules/starter/project-structure/index.html",
    "title": "4. Projects and paths",
    "section": "",
    "text": "Good project organisation is essential for collaboration, transparency, and reproducibility in any data analysis project. A well organised project sets a strong foundation for reliable data analysis, ultimately saving you time and reducing the risk of errors.\nThis module introduces practical strategies to organise your workflow and files. You will learn how to create and use R Projects, understand relative and absolute file paths, and structure your work for clarity and reproducibility."
  },
  {
    "objectID": "modules/starter/project-structure/index.html#sec-projects",
    "href": "modules/starter/project-structure/index.html#sec-projects",
    "title": "4. Projects and paths",
    "section": "R Projects",
    "text": "R Projects\nR Projects are an RStudio feature that can help you organise all files related to a single project folder and access them in a project specific workspace.\n\n\n\nArtwork by @allison_horst.\nUsing an R Project in RStudio helps with:\n\nAutomatic working directory: When you open an R Project, RStudio automatically sets the working directory location to the project’s folder. The working directory is the folder relative file paths are built from (more details later).\nProject settings: The .Rproj file created when you make an R Project stores project-specific settings and keyboard shortcuts (e.g., git, packages, or documents). These settings are automatically loaded when you open the project in RStudio.\nWorkspace restoration: When you reopen an R Project, Rstudio will reload your workspace (scripts, unsaved changes and history) exactly how you left it.\nFolder structure: R projects make it easy to access related files in the project folder with relative paths, making your analysis easier to share with others.\n\n\n\n\n\n\n\nCreate an R project\n\nClick the project drop-down in the top-right corner. Then click on the “New Project…”.\n\n\n\nIt will show you three options.\n\nNew Directory: Start from scratch with a new empty folder for your project.\nExisting Directory: If you’re already started some work without a project, convert that folder into a project.\nVersion Control: If your work already exists elsewhere as a git or svn repository (such as GitHub), this will download the work and create a project for it.\n\nFor your very first R project, let’s start by selecting “New Directory”.\n\n\n\nThere are many different types of R projects that you can create. These various project types come bundled with starter code and settings (for shortcuts and build options). A standard project (without any boilerplate or settings) is suitable most projects - so simply select “New Project” for an empty folder.\n\n\n\nGive your project (and the folder containing it) a name using the “Directory name:” field. You can also choose where the project will exist on your computer by clicking on the “Browse…” button. If you do not choose, it will be in your home folder (/home/&lt;username&gt; on macOS, and C:/Users/&lt;username&gt; on Windows). You can leave the rest (git and renv) unchecked for now.\n\n\n\nClick “Create Project”.\n\n\n\n\n\n\n\n\nProject created!\n\n\n\nYou have now successfully created the R project! Verify this by checking:\n\nThe project name in the top right project dropdown\nThe current working directory (getwd()) is the project folder\nThe files pane shows the content of your project folder\n\n\n\n\n\nUsing R projects\nThere are multiple ways to open an R Project in RStudio:\n\nRStudio Project Selector:\nUse the project selector dropdown in the top right corner to quicky switch between recent projects. \nOpening the .Rproj File:\nOpen the project’s .Rproj file from your file explorer. \n\nAny work you do while in this project will be restored when you next open the project (even unsaved files, but please don’t rely on this and save your work!).\nYou can close the project by simply closing RStudio (or via Project selector (top-right) → Close Project to keep RStudio open).\nWhen you close your project you might be prompted to save your ‘workspace image’, to which we recommend you select Don’t Save.\n\n\n\n\n\n\n\nSaving the workspace image? No!\n\n\n\n\n\nWhile you should always save your work, it is best for reproducibility to not save your workspace image. Saving the workspace means next time you open the project, R Studio will also reload your last R session, along all of the variables and functions you previously created. While this seems convenient, it is better to explicitly load data and scripts each time you open a project to ensure that your analysis results can be re-run by anyone, including your future self.\n\n\nYou can prevent the popup messages by going to Tools → Global Options. Then select General on the side-bar and change “Save workspace to .RData on exit” to “Never”.\n\n\n\n\n\n\nProject organisation\n\n\n\nArtwork by @allison_horst.\nWhile an R Project helps you quickly switch between projects, it is up to you to organise your files into suitable subfolders within the project folder. By structuring your files effectively, you can reduce the risk of losing important data, simplify the code for accessing your data, and make it easier to locate each script.\n\n\n\n\n\n\nFile folders\nA clear and consistent folder structure starts with sensible folder names. Here’s an example of a typical R Project directory structure:\nmy-awesome-project/\n├── data-raw/                   # Raw / unprocessed data files\n│   ├── survey_results_2024.csv\n│   ├── population_data.xlsx\n├── data/                       # Clean / processed data files\n│   ├── survey_cleaned_2024.csv\n│   ├── population_summary.csv\n├── R/                          # R scripts\n│   ├── data_cleaning.R\n│   ├── exploratory_analysis.R\n│   └── model_fitting.R\n├── outputs/                    # Results, figures, tables, and other outputs\n│   ├── figures/                # Graphs and charts\n│   │   ├── age_distribution_plot.png\n│   │   └── time_series_trends.jpeg\n│   └── tables/                 # Data tables and results\n│       ├── regression_summary.csv\n├── README.md                   # Project description and instructions\n└── my-awesome-project.Rproj    # R Project file\nThis structure is suitable for most simple data analysis projects. We recommend you try to organise a few projects with this template before making modifications based on your personal preferences and project specific needs.\n\n\n\n\n\n\nExpand For Recommended Folder Uses\n\n\n\n\n\n\ndata-raw/: This folder holds all original data files related to the project. Keeping raw and processed data separate ensures transparency and helps maintain data integrity.\ndata/: Save your tidy, clean and otherwise processed data here. This allows you to quickly read in analysis-ready data without needing to re-run your data cleaning script.\nR/: Store all your R scripts here, we recommend the folder name “R” (to match the structure of an R package). More language-agnostic projects might use a “src”, “scripts”, or “code” folder. It’s a good practice to separate scripts into different categories depending on their function (e.g., data cleaning, analysis, modelling).\noutputs/: This folder stores the outputs of your analysis, such as figures, tables, or models. You can have subfolders like figures/ and tables/ to separate the different types of results. This makes it easier to find specific outputs and ensures that your working directory isn’t cluttered with unnecessary files.\nREADME.md: A README file is essential for documenting the purpose of the project, how to run the analysis, and any specific instructions for collaborators. This file helps others (and yourself, in the future) understand the project structure, dependencies, and key steps involved.\nmy-awesome-project.Rproj: This is the R Project file, which we created earlier. Projects help maintain your project’s workspace, settings, and set the working directory. It should always be kept at the root of the project folder.\n\n\n\n\n\n\n\nPortable and reproducible projects\nOne of the key principles of maintaining an organised and reproducible workflow is to keep all project-related files within the project folder. This approach ensures that your project has:\n\nReproducibility: By keeping everything in one place, you ensure that your code can easily locate all the necessary files (data, scripts, outputs) using relative paths. This makes your analysis reproducible for anyone who accesses the project.\nPortability: A self-contained project is portable, meaning you can move it to another computer, share it with collaborators, or distribute it with version control platforms (e.g. GitHub) without breaking any links or dependencies.\nOrganisation: Storing all files in one structured location helps avoid confusion and ensures you can quickly locate the resources you need.\n\n\n\n\n\n\n\n\nR packages not included\n\n\n\n\n\nR projects usually include everything except the R packages it depends on, which are instead usually found in the system’s global R environment.\nThis can cause reproducibility issues if the project is used on a system where some packages are missing, incompatible, or at different versions with different functionality. To address this, you can use the renv package, which bundles and manages package versions locally within the project folder. This ensures that your analysis always uses the correct versions of dependencies. \n\n\n\n\n\nCheck your understanding\nWhat is the main benefit of using an RStudio Project?\n\n\n\n\n\n\n\n\n\nHow can you open an RStudio Project?\n\n\n\n\n\n\n\n\n\nWhat happens to the working directory when you open an RStudio Project?\n\n\n\n\n\n\n\n\n\nWhich of the following files is typically included in an RStudio Project?\n\n\n\n\n\n\n\n\n\nWhich of the following is NOT true about RStudio Projects?\n\n\n\n\n\n\n\n\n\nWhat should you avoid when closing an RStudio Project?"
  },
  {
    "objectID": "modules/starter/project-structure/index.html#sec-path",
    "href": "modules/starter/project-structure/index.html#sec-path",
    "title": "4. Projects and paths",
    "section": "File Paths",
    "text": "File Paths\nWhen working with files in R, understanding and using file paths correctly is essential to ensure your scripts run seamlessly, whether on your computer or someone else’s.\n\n\nFile paths can be specified in two main ways: absolute paths and relative paths. Both approaches work to locate files, but they behave very differently when running your code on other computers. Appropriately specified file paths ensure that your projects will be portable to other people’s computers by enabling others to execute your analysis workflow without editing your scripts.\n\nAbsolute paths\nAn absolute path specifies the full location of a file or folder on your system starting from the root directory (e.g., C:/ on Windows or / on macOS/Linux).\nExample:\n# Windows\ndata &lt;- read.csv(\"C:/Users/Admin/Documents/my-awesome-project/data/survey_data.csv\")\n\n# macOS/Linux\ndata &lt;- read.csv(\"/home/Admin/Documents/my-awesome-project/data/survey_data.csv\")\nNotice how the file path differs between operating systems? This is bad for reproducibility.\n\n\n\n\n\n\nAbsolute paths are NOT portable!\n\n\n\n\n\nWhile absolute paths work on your computer, they are not portable because:\n\nThey depend on the exact file structure of your system.\nIf you share your project with others, their computer systems may not have the same directory structure.\nMoving your project to a new location can break the paths.\n\nFor these reasons, using absolute paths is strongly discouraged.\n\n\n\n\n\nRelative paths\nA relative path specifies the location of a file or folder relative to the current working directory. If you work within an [R Project]((#sec-projects), the current working directory is automatically set to the project folder, making relative paths the most reliable and portable option.\nExample:\n# Windows/macOS/Linux\ndata &lt;- read.csv(\"./data/survey_data.csv\")\nIn this example:\n\n./ refers to the current working directory. It is optional.\n./data/ navigates to the data/ subfolder within the project folder.\n\nRelative paths ensure that your scripts work regardless of where the project folder is located, as long as the folder structure remains consistent. This makes them ideal for reproducible analysis. 🎉\n\n\n\n\n\n\nFinding files\n\n\n\n\n\nWhen specifying file paths in R, you can use tab completion to quickly find and insert file paths. Inside quotation marks (““), start typing the folder or file name and press the TabTab key.\nRStudio will then show a list of matching files and folders, making it easier to navigate your project, find files and avoid typos.\nVideo\n\n\n\n\nWorking directories\nThe working directory in an R session is the folder from which R looks for files specified using relative paths. The working directory is almost always your project folder.\nYou can check your current working directory with the getwd() function.\n\n\n\n\n\n\n\n\n\n\n\nThis function returns the absolute path of the current working directory.\nYou can (but shouldn’t) change your working directory with setwd(). Instead, we strongly recommend using R Projects and relative paths from the project folder.\n\n\n\n\n\n\nWorking directory in R Markdown and Quarto\n\n\n\n\n\nWhen running R Markdown or Quarto documents, the working directory is instead the location of the document. You can think of these documents as being their own mini-projects, where files paths to images and data are relative to the document.\nIf your document is in a sub-folder of an R project the relative paths can be confusing. R scripts will use the project folder, while your R documents will use the document folder!\n\n\n\n\n\n\n\n\nProject paths\nAnother type of relative path is a project path, which specifies the location of files relative to the project folder (rather than the working directory). This can be useful since the project paths will work even if the working directory in R changes (e.g. when using code in R Markdown or Quarto documents).\n\n\n\nArtwork by @allison_horst.\nThe here package helps you create file paths relative to the project folder, ensuring that your scripts and analyses are portable and reproducible across different systems. The here() function automatically detects the project folder based on the location of your .Rproj file (or other indicators, like a README.md or .git folder).\nExample:\n# Windows/macOS/Linux\ndata &lt;- read.csv(here::here(\"data/survey_data.csv\"))\nIn this example:\n\nhere::here() refers to the the project folder.\ndata/survey_data.csv is the path to the dataset from the project folder.\n\n\n\n\n\n\n\nProject portability\n\n\n\n\n\nSince project paths are relative to the project folder, you will need to share the entire project for your code to be reproducible by others. Without the .Rproj file (or other project indicator), the here::here() package won’t know which folder is your project folder.\n\n\n\n\n\n\nExternal paths\nExternal paths refer to file locations external to the computer you are using but accessible over a network connection. External paths are specified with a URL (Uniform Resource Locator).\nExample:\n# Windows/macOS/Linux\ndata &lt;- read.csv(\"https://learnr.numbat.space/data/survey_results.csv\")\nA URL consists of several parts:\n\nProtocol (https://): The communication method used to access the resource. Most often this will be http or https (Hypertext Transfer Protocol Secure, the protocol for websites). Other protocols that are commonly used include ftp (File Transfer Protocol), or s3 (Simply Storage Service).\nAddress / Location (learnr.numbat.space): The network address of the server hosting the resource. In this case, learnr.numbat.space is the address, identifying the specific server to connect to.\n\nPath (/data/survey_results.csv): The absolute path of the file or resource on the server.\nOther Information: Sometimes additional details are needed to connect to the external server, commonly this is:\n\nA port number like :8080 specifies a network port (https://learnr.numbat.space:8080/...).\n\nCredentials like username:password@ can provide login information (https://user:pass@learnr.numbat.space/...).\n\n\n\n\n\n\n\n\nUsing external paths\n\n\n\n\n\nMany R functions allow you to directly use web URLs for accessing data, for example read.csv() shown earlier. If the function you want doesn’t support external file paths, you can download the files with download.file().\ndownload.file(\"https://learnr.numbat.space/data/survey_results.csv\", destfile = \"data/survey_results.csv\")\ndata &lt;- read.csv(\"data/survey_results.csv\")\n\n\n\n\n\n\nCheck your understanding\nWhich of the following is an example of an absolute path?\n\n\n\n\n\n\n\n\n\nWhy should you avoid using absolute paths in R scripts?\n\n\n\n\n\n\n\n\n\nWhat does the {here} package do?\n\n\n\n\n\n\n\n\n\nWhich of the following is NOT true about relative paths?\n\n\n\n\n\n\n\n\n\nWhich part of the URL specifies the communication method for the external resource?"
  },
  {
    "objectID": "modules/starter/debugging/index.html",
    "href": "modules/starter/debugging/index.html",
    "title": "5. Strategies for troubleshooting in R",
    "section": "",
    "text": "Eek! There’s a bug in my code and it’s causing lots of scary red errors!\nDon’t panic - believe it or not, this error is just trying to help you! It also may have just saved you from invalid results that you may not have have noticed.\nErrors can be frustrating, essentially you’ve just asked the computer to do something and it has said no!\nThere are a few troubleshooting techniques that we can use to find the source of the error, modify your code, and get the results you’re looking for."
  },
  {
    "objectID": "modules/starter/debugging/index.html#lets-have-a-look-at-some-common-error-messages",
    "href": "modules/starter/debugging/index.html#lets-have-a-look-at-some-common-error-messages",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Let’s have a look at some common error messages",
    "text": "Let’s have a look at some common error messages\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nOh no! An error message: “Error: object ‘palmerpenguins’ not found”!\nWhen you see the error message “Error: object ‘_____’ not found”, it usually means there is a typo or the object wasn’t loaded in correctly. In this instance, we haven’t used the correct object. Let’s look at how we can fix this.\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nTypos are a common error, whether it’s in the object name or the function name. In this example, we accidentally used the package name, instead of the name of the data from within the package. When you see the error message “Error: object ‘_____’ not found”, please check and make sure that everything is inputted correctly and the relevant packages are loaded in."
  },
  {
    "objectID": "modules/starter/debugging/index.html#what-if-we-cannot-find-the-function",
    "href": "modules/starter/debugging/index.html#what-if-we-cannot-find-the-function",
    "title": "5. Strategies for troubleshooting in R",
    "section": "What if we cannot find the function?!",
    "text": "What if we cannot find the function?!\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nOh no, we could not find the function of glimpse()! We’ve checked the spelling, so what could be the problem now?\nWhen you see the error message “Error: could not find function”_____”, it usually means the required package hasn’t been loaded into environment.\nLet’s try add in the required package dplyr\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nSometimes, reading the error message can be a bit tricky. If you’re not sure what the error message is trying to tell you, don’t worry! We’ll cover some other strategies."
  },
  {
    "objectID": "modules/starter/debugging/index.html#search-the-message",
    "href": "modules/starter/debugging/index.html#search-the-message",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Search the message 🔎",
    "text": "Search the message 🔎\nOften, error messages can be confusing, and even after carefully reading the message it may be difficult to ascertain what the problem is.\nChances are you’re not the first person to encounter this problem and there’s a well explained solution waiting for you on the internet - you just need to find it.\nTake this notoriously confusing error for example. In this code, I want to see the first few values of my sample object. Try running the code below:\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n“Error: object of type ‘closure’ is not subsettable”\nWhat is a ‘closure’? Why can’t I subset my data with x[1:3]?\nWhen confronted with an error you’ve never seen, and don’t understand - search the web! Just copy the error exactly, “object of type ‘closure’ is not subsettable”, add some relevant keywords like “R” and search!\nWith some luck, you’ll be met with a series of StackOverflow threads, blog posts and other websites explaining the solution to the exact problem you’re facing. Here’s my top 3 search results:\n\nhttps://coolbutuseless.github.io/2019/02/12/object-of-type-closure-is-not-subsettable/\nhttps://stackoverflow.com/questions/11308367/error-in-my-code-object-of-type-closure-is-not-subsettable\nhttps://www.r-bloggers.com/2019/02/object-of-type-closure-is-not-subsettable/\n\n\n\n\n\n\n\nTips for searching errors online\n\n\n\n1. Add double quotes around the error message. This searches for those exact words in that exact order.\n2. For long error messages, just search for the unique sounding parts (don’t include parts specific to your code, like a variable name)\n3. Add keywords to describe your code’s language, like ‘R’.\n4. If you’re looking for solutions on a specific website, add site:&lt;domain&gt; to the search. For example, site:stackoverflow.com."
  },
  {
    "objectID": "modules/starter/debugging/index.html#divide-and-conquer",
    "href": "modules/starter/debugging/index.html#divide-and-conquer",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Divide and conquer 💪",
    "text": "Divide and conquer 💪\nIf you understand the message, but have no idea where the problem stems from - try running smaller sections of your code to see if that small section causes the error. Once you identify the small section of code causing the error, it should be slightly easier to find the issue in your code.\n\n\n\n\n\n\nRunning into this issue often?\n\n\n\nIf you frequently use this strategy, it may indicate a code styling issue. Consider breaking your code into smaller pieces instead of trying to do everything in one line. For tips on good coding practices, see Jenny Bryan’s presentation ’Code Smells and Feels."
  },
  {
    "objectID": "modules/starter/debugging/index.html#turn-it-off-and-on-again",
    "href": "modules/starter/debugging/index.html#turn-it-off-and-on-again",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Turn it off and on again 🔄",
    "text": "Turn it off and on again 🔄\nThe age old classic (but sometimes it really does work!).\nIn R, you don’t necessarily need to restart your whole computer, but instead you can try restarting RStudio, or your R session. Usually I would restart R, which can be done in RStudio\nThis can be done in two ways:\n\n‘Session’ on the top menu bar, then ‘Restart R’\nCtrl + Shift + F10 (Windows) or Cmd + Shift + F10 (Mac)\n\nThere are a few reasons why this can work. It allows you to re-run your code from a clean slate, with no extra packages loaded that you haven’t asked for and no extra objects in your environment."
  },
  {
    "objectID": "modules/starter/debugging/index.html#describe-the-problem",
    "href": "modules/starter/debugging/index.html#describe-the-problem",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Describe the problem",
    "text": "Describe the problem\nA good description provides some context to your question. When writing your question, think about what you are trying to achieve.\nInstead of writing generic phrases like “it doesn’t work” or “it shows errors,” provide more detailed information about your issue.\n\nClearly state your goal and the expected output.\nInclude the exact wording of any error messages you receive.\nUse a descriptive title that summarises your problem succinctly."
  },
  {
    "objectID": "modules/starter/debugging/index.html#provide-a-minimal-reproducible-example",
    "href": "modules/starter/debugging/index.html#provide-a-minimal-reproducible-example",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Provide a minimal reproducible example",
    "text": "Provide a minimal reproducible example\nA minimal reproducible example is the smallest amount of code that still produces the error. This step is so important that we’ve dedicated an entire section to writing good examples. An example allows the person helping you to quickly understand the issue you are facing, and make changes directly to your example to demonstrate the solution.\nThe process of creating an example, and reducing it down into the minimal amount of code you can to produce the error, often results in you finding the solution yourself."
  },
  {
    "objectID": "modules/starter/debugging/index.html#where-to-ask-for-help",
    "href": "modules/starter/debugging/index.html#where-to-ask-for-help",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Where to ask for help",
    "text": "Where to ask for help\n\n\n\nStack Overflow.\nThis is a platform where you can search for solutions and ask for help. Before asking a question on Stack Overflow, you can search some key words from your understanding of error messages. It is likely that people have already asked similar questions related to your error and you can try the solutions provided by others under the question.\n\n\nRStudio Community.\nThis is a community channel for RStudio users. Similar to Stack Overflow, you can ask questions and also find solutions.\n\n\nGitHub.\nIf you’ve thoroughly investigated your error and believe the issue lies in the package rather than your code, you can contact the package’s developer. Most R packages are open-source and maintained on Github.\n1. Search for the package’s repository using its name along with “R” and “GitHub”.\n2. Use the “Issues” tab to report your problem.\n3. Make sure to check if the issue has already been reported before creating a new one.\n\n\nDiscussion Forum on Moodle or Ed.\nIf you’re preparing for your Monash University course, a good place to ask for help is the discussion forum on Moodle. You can also seek assistance from your lecturers and tutors.\n\nIf your unit uses Ed as a discussion space, use it to ask or answer questions. Some units may even allow you to post privately or anonymously if you feel shy posting publicly.\n\n\n\nTrusty (sometimes) AI.\nThere are many AI tools that can help you write code, and some can even help you debug it. However, AI should be used with caution. While it can assist in troubleshooting errors, it may not always provide the best solution. You should still try to understand what the code is doing and why it’s causing an error to avoid using code from AI which may be producing inaccurate results (despite running without error).\n\n\nTeachers and Tutors in Consultations.\nAsk your lecturers and tutors for help during consultation sessions, which are available for any content-related difficulties, including debugging code.\n\nPrepare a small demonstration of your error beforehand to make the session more effective.\nThe benefit of these sessions is that we can guide you closer to the solution until you figure it out yourself.\nDon’t be disheartened if your error, which you’ve struggled with for hours, is solved in minutes — we’ve had plenty of practice (also being stuck for hours) troubleshooting these errors.\n\n\n\n\n\n\n\n\n\n\nHelp and Learn\n\n\n\nAnswering questions on the forum can help consolidate your understanding and prepare you for asking and answering questions in other forums such as Stack Overflow."
  },
  {
    "objectID": "modules/starter/debugging/index.html#providing-minimal-datasets",
    "href": "modules/starter/debugging/index.html#providing-minimal-datasets",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Providing minimal datasets",
    "text": "Providing minimal datasets\nIf your question involves using a dataset, you will need to provide a small dataset to demonstrate the problem. Often people say that the data is confidential and can’t be provided, but usually the problem isn’t specific to the data you are using. Taking the time to try your code on a different dataset is a good debugging step, and R provides many good datasets to use in these examples built in. You can find a complete list of datasets available to all R users with the data(package = \"datasets\") function.\nIf you do need to use a custom dataset specific to your project, try reducing the size of the dataset before making your example. The error may only occur for some specific rows of your data. Once you’ve narrowed in on the issue, you can convert your minimal data object to code for producing it using the dput() function.\nFor example you can use use the below code to provide the first 6 rows of the iris dataset.\n\ndput(head(iris))\n\nstructure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6, 5, 5.4), \n    Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9), Petal.Length = c(1.4, \n    1.4, 1.3, 1.5, 1.4, 1.7), Petal.Width = c(0.2, 0.2, 0.2, \n    0.2, 0.2, 0.4), Species = structure(c(1L, 1L, 1L, 1L, 1L, \n    1L), levels = c(\"setosa\", \"versicolor\", \"virginica\"), class = \"factor\")), row.names = c(NA, \n6L), class = \"data.frame\")\n\n\nTry it yourself! Create a minimal dataset using the dput() function for the penguins dataset.\n\n\n\n\n\n\nHint\n\n\n\nWe want to be putting the penguins data to create a minimal dataset.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nYou can then copy this generated code, and make it part of your example to create your example data.\nAlternatively you can save this minimal dataset to a file, and attach the file in your question.\nWhen you read that file in, make sure you avoid absolute paths to it. Not everyone has the same file structure as you, so they won’t be able to access your dataset if it is stored at /home/learnr/Documents/My Job/project_2040/data/housing_prices.csv. Instead provide a short relative oath, such as housing_prices.csv or data/housing_prices.csv. If you’re uploading files, it’s also nice to provide a zip that contains a R script of your minimal reproducible code, along with the data in the folders referenced by the script.\n– potentially a multiple choice question here on relative paths? —"
  },
  {
    "objectID": "modules/starter/debugging/index.html#create-minimal-reproducible-examples",
    "href": "modules/starter/debugging/index.html#create-minimal-reproducible-examples",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Create minimal reproducible examples",
    "text": "Create minimal reproducible examples\nAs part of a data analysis you probably write a lot of code. You need to read in the data, tidy it up, run some calculations and make some plots. When you run into an error, providing your entire analysis just makes it more time consuming for helpers to run your code and identify the source of the error.\nA minimal reproducible example cuts out as much of the code as possible, keeping just a few essential lines for producing the error. If your error comes after the data cleaning, remove that code and start with a clean, minimal dataset.\nIf your code includes any randomisation, it’s a good idea to set the random seed using the set.seed() function. This ensures that each time the code is ran, the same random results are obtained.\n\n\n\n\n\n\nReproducing random results\n\n\n\nThe set.seed() function in R ensures reproducible results in code involving random values. It guarantees the same random values are produced each time you run the code, aiding in debugging and consistency. The number in the brackets can be any integer.\n\n\nThe process of cleaning up your code and reducing it down into a small example is another great exercise that often helps you identify the problem and fix it yourself.\nRemember, you need to provide all code necessary to load in packages you use, read in data and run functions that cause the error."
  },
  {
    "objectID": "modules/starter/debugging/index.html#provide-session-information",
    "href": "modules/starter/debugging/index.html#provide-session-information",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Provide session information",
    "text": "Provide session information\nSometimes the error is specific to the version of R, or the packages you are using. To help others help you, you can provide the session information using the sessioninfo::sessionInfo() function. This will print out the version of R you are using, and the versions of the packages you have loaded, which makes it easier to fix some version, language or OS specific problems. A good reproducible example should come with this session information output."
  },
  {
    "objectID": "modules/starter/debugging/index.html#using-the-reprex-package-for-producing-examples",
    "href": "modules/starter/debugging/index.html#using-the-reprex-package-for-producing-examples",
    "title": "5. Strategies for troubleshooting in R",
    "section": "Using the reprex package for producing examples",
    "text": "Using the reprex package for producing examples\nthe reprex package is a useful tool that can help you make a reproducible example. It can be used to run the code in your example in a clean environment, which is a good way to test if you’ve included everything necessary for others to reproduce the error. It’ll also copy a neatly formatted version of your example which will also display in your Viewer window and includes images and console output from the example as it runs on your computer. It can even include a collapsible summary of your session information.\nTo use reprex:\n\nInstall it from CRAN using install.packages(\"reprex\").\nOnce installed, load in the reprex package using library(reprex)\nYou can use the reprex() function to create a reproducible example.\n\nYou can also use the reprex() function in RStudio by selecting the code you want to include in the example, and clicking the “Reprex” button in the Addins menu.\n\n    \n    \n\nAfter clicking Render reprex... in the Addins menu, a new window will pop up with the reprex output (left image). As you’ve copied the example, you can use the ‘on the clipboard’ source. Choose a venue for where you’re planning to post the question, and tick ‘Append session info’. Finally, press Render to run the code and see if it’s reproducible.\nView this short clip to see how to use the reprex package."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Monash EBS Modules",
    "section": "",
    "text": "Getting started \n  \n\n\n\n\n 1. Installing R and RStudio   Install R and RStudio on Windows, macOS, or Linux.      Ready    20 minutes        Beginner  \n\n\n 2. RStudio basics   Learn how to use RStudio and install R packages.      Draft    15 minutes        Beginner  \n\n\n 3. R basics   Start writing R code with basic functions and mathematical operations. Learn code syntax, chain functions together with the pipe (|&gt;), and understand the different types of data that can exist together in a dataset.      Draft    20 minutes        Beginner  \n\n\n 4. Projects and paths   Establish good practices for organising and accessing project files. Essential for when you share your work with others.      Ready    20 minutes        Beginner  \n\n\n 5. Strategies for troubleshooting in R   With coding comes bugs and errors that need troubleshooting. In this chapter, you will learn how to decipher errors, find help for fixing them, and practice asking clear questions with minimally reproducible examples.      WIP    1 hour        Advanced  \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n   Tidy data analysis \n  \n\n\n\n\n Data wrangling with R   In this chapter, you will learn to use tidyr and dplyr from the tidyverse in R for tidying your data set and data maniplulation.      WIP    30 minutes        Beginner  \n\n\n Linear regression with R   Welcome to the LearR Academy module on Linear Regression! This module is designed to introduce you to the concepts and techniques of linear regression, an widely used tool in the field of statistics, data science, and machine learning. Through this module,…      WIP    40 minutes        Intermediate  \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n   Document writing \n  \n\n\n\n\n Monash Quarto templates   A collection of monash templates for your assignments, projects, papers, and more.      WIP    30 minutes        Beginner  \n\n\n Quarto Basics   With Quarto, creating documents and reports becomes a breeze. In this chapter, you will learn how to set up Quarto, explore its key features, and start creating your own quarto documents with ease.      WIP    30 minutes        Beginner  \n\n\n\nNo matching items\n\n\n\n\n\nThe team\nContribute\nAbout\nBuilt with Quarto"
  }
]